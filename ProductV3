import os
import sys
import json
import csv
import math
from datetime import datetime

from PyQt5.QtWidgets import (QApplication, QMainWindow, QVBoxLayout, QHBoxLayout, QTabWidget, QLabel, QPushButton,
                             QFileDialog, QWidget, QTableWidget, QTableWidgetItem, QComboBox, QTreeWidget, QTreeWidgetItem,
                             QDialog, QFormLayout, QLineEdit, QTextEdit, QSplitter, QPlainTextEdit, QCheckBox, QInputDialog,
                             QMenu, QAction, QToolBar, QHeaderView, QFrame, QGroupBox, QSpacerItem, QSizePolicy,
                             QMessageBox, QAbstractItemView, QListWidget, QListWidgetItem, QGraphicsView, QGraphicsScene,
                             QGraphicsEllipseItem, QGraphicsTextItem, QGraphicsLineItem)
from PyQt5.QtCore import Qt, QPointF, QTimer, pyqtSignal
from PyQt5.QtGui import QPen, QFont, QPainter, QTransform, QBrush, QColor, QPainterPath

# ---------------------------
# Glossary Manager
# ---------------------------
class GlossaryManager:
    def __init__(self):
        self.subsystems = {
            "GN&C": "Guidance, Navigation, and Control",
            "Propulsion": "Propulsion subsystem",
            "Thermal": "Thermal management subsystem",
            "ECLSS": "Environmental Control and Life Support",
            "Comms": "Communications",
            "Power": "Power subsystem",
            "Structures": "Structural subsystem"
        }
    def get_data(self):
        return self.subsystems
    def update_term(self, term, definition):
        self.subsystems[term]=definition
    def remove_term(self, term):
        if term in self.subsystems:
            del self.subsystems[term]

class RequirementDetailDialog(QDialog):
    def __init__(self, parent, title, req_data=None):
        super().__init__(parent)
        self.setWindowTitle(title)
        self.setStyleSheet("background-color: #2E2E2E; color: #FFFFFF;")
        self.setModal(True)

        self.req_data = req_data if req_data else {
            "ID": "",
            "Description": "",
            "Category": "Functional",
            "Source": "",
            "Rationale": "",
            "AcceptanceCriteria": "",
            "Traceability": "",
            "VerificationMethod": "Test",
            "Priority": "Medium",
            "Status": "Proposed",
            "AssignedTo": "System",
            "DerivedFrom": "",
            "Archived": False
        }

        layout = QFormLayout(self)

        self.id_input = QLineEdit(self.req_data["ID"])
        self.id_input.setStyleSheet("background-color: #FFFFFF; color: #000000;")
        layout.addRow("Requirement ID:", self.id_input)

        self.desc_input = QTextEdit(self.req_data["Description"])
        self.desc_input.setStyleSheet("background-color: #FFFFFF; color: #000000;")
        layout.addRow("Description:", self.desc_input)

        self.category_input = QComboBox()
        self.category_input.setStyleSheet("background-color: #FFFFFF; color: #000000;")
        categories = ["Functional", "Non-Functional", "Interface", "Performance", "Regulatory", "Constraint", "Derived"]
        self.category_input.addItems(categories)
        if self.req_data["Category"] in categories:
            self.category_input.setCurrentText(self.req_data["Category"])
        layout.addRow("Category:", self.category_input)

        self.source_input = QLineEdit(self.req_data["Source"])
        self.source_input.setStyleSheet("background-color: #FFFFFF; color: #000000;")
        layout.addRow("Source:", self.source_input)

        self.rationale_input = QTextEdit(self.req_data["Rationale"])
        self.rationale_input.setStyleSheet("background-color: #FFFFFF; color: #000000;")
        layout.addRow("Rationale:", self.rationale_input)

        self.acceptance_input = QTextEdit(self.req_data["AcceptanceCriteria"])
        self.acceptance_input.setStyleSheet("background-color: #FFFFFF; color: #000000;")
        layout.addRow("Acceptance Criteria:", self.acceptance_input)

        self.trace_input = QTextEdit(self.req_data["Traceability"])
        self.trace_input.setStyleSheet("background-color: #FFFFFF; color: #000000;")
        layout.addRow("Traceability:", self.trace_input)

        self.verify_input = QComboBox()
        self.verify_input.setStyleSheet("background-color: #FFFFFF; color: #000000;")
        verify_methods = ["Inspection", "Analysis", "Demonstration", "Test"]
        self.verify_input.addItems(verify_methods)
        if self.req_data["VerificationMethod"] in verify_methods:
            self.verify_input.setCurrentText(self.req_data["VerificationMethod"])
        layout.addRow("Verification Method:", self.verify_input)

        self.priority_input = QComboBox()
        self.priority_input.setStyleSheet("background-color: #FFFFFF; color: #000000;")
        priorities = ["Low", "Medium", "High", "Critical"]
        self.priority_input.addItems(priorities)
        if self.req_data["Priority"] in priorities:
            self.priority_input.setCurrentText(self.req_data["Priority"])
        layout.addRow("Priority:", self.priority_input)

        self.status_input = QComboBox()
        self.status_input.setStyleSheet("background-color: #FFFFFF; color: #000000;")
        statuses = ["Proposed", "Approved", "Verified", "Validated", "Rejected"]
        self.status_input.addItems(statuses)
        if self.req_data["Status"] in statuses:
            self.status_input.setCurrentText(self.req_data["Status"])
        layout.addRow("Status:", self.status_input)

        self.assign_input = QComboBox()
        self.assign_input.setStyleSheet("background-color: #FFFFFF; color: #000000;")
        assigns = ["System", "Subsystem", "Component"]
        self.assign_input.addItems(assigns)
        if self.req_data["AssignedTo"] in assigns:
            self.assign_input.setCurrentText(self.req_data["AssignedTo"])
        layout.addRow("Assigned To:", self.assign_input)

        self.derived_input = QLineEdit(self.req_data["DerivedFrom"])
        self.derived_input.setStyleSheet("background-color: #FFFFFF; color: #000000;")
        layout.addRow("Derived From (ReqID):", self.derived_input)

        self.archived_input = QCheckBox("Archived")
        self.archived_input.setStyleSheet("color:#FFFFFF;")
        self.archived_input.setChecked(self.req_data["Archived"])
        layout.addRow(self.archived_input)

        btn_layout = QHBoxLayout()
        save_btn = QPushButton("Save")
        save_btn.setStyleSheet("background-color: #000000; color: #FFFFFF;")
        save_btn.clicked.connect(self.accept)
        cancel_btn = QPushButton("Cancel")
        cancel_btn.setStyleSheet("background-color: #000000; color: #FFFFFF;")
        cancel_btn.clicked.connect(self.reject)
        btn_layout.addWidget(save_btn)
        btn_layout.addWidget(cancel_btn)

        layout.addRow(btn_layout)
        self.setLayout(layout)

    def get_data(self):
        return {
            "ID": self.id_input.text(),
            "Description": self.desc_input.toPlainText(),
            "Category": self.category_input.currentText(),
            "Source": self.source_input.text(),
            "Rationale": self.rationale_input.toPlainText(),
            "AcceptanceCriteria": self.acceptance_input.toPlainText(),
            "Traceability": self.trace_input.toPlainText(),
            "VerificationMethod": self.verify_input.currentText(),
            "Priority": self.priority_input.currentText(),
            "Status": self.status_input.currentText(),
            "AssignedTo": self.assign_input.currentText(),
            "DerivedFrom": self.derived_input.text(),
            "Archived": self.archived_input.isChecked()
        }

class RequirementDialogDecomposition(QDialog):
    def __init__(self, parent, title, dec_id=None, dec_details=None):
        super().__init__(parent)
        self.setWindowTitle(title)
        self.setStyleSheet("background-color: #2E2E2E; color: #FFFFFF;")
        layout = QFormLayout(self)

        self.id_input = QLineEdit(dec_id if dec_id else "")
        self.id_input.setStyleSheet("background-color: #FFFFFF; color: #000000;")
        layout.addRow("ID:", self.id_input)

        self.level_input = QComboBox()
        self.level_input.setStyleSheet("background-color: #FFFFFF; color: #000000;")
        self.level_input.addItems(["System", "Subsystem", "Component", "Software", "Integration Mechanism"])
        if dec_details:
            self.level_input.setCurrentText(dec_details["Level"])
        layout.addRow("Level:", self.level_input)

        self.desc_input = QTextEdit(dec_details["Description"] if dec_details else "")
        self.desc_input.setStyleSheet("background-color: #FFFFFF; color: #000000;")
        layout.addRow("Description:", self.desc_input)

        btn_layout = QHBoxLayout()
        save_btn = QPushButton("Save")
        save_btn.setStyleSheet("background-color: #000000; color: #FFFFFF;")
        save_btn.clicked.connect(self.accept)
        cancel_btn = QPushButton("Cancel")
        cancel_btn.setStyleSheet("background-color: #000000; color: #FFFFFF;")
        cancel_btn.clicked.connect(self.reject)
        btn_layout.addWidget(save_btn)
        btn_layout.addWidget(cancel_btn)

        layout.addRow(btn_layout)
        self.setLayout(layout)

    def get_data(self):
        return self.id_input.text(), {"Level": self.level_input.currentText(), "Description": self.desc_input.toPlainText()}


class TestDetailDialog(QDialog):
    def __init__(self, parent, title, test_data=None, requirements_list=None):
        super().__init__(parent)
        self.setWindowTitle(title)
        self.setStyleSheet("background-color: #2E2E2E; color: #FFFFFF;")
        self.setModal(True)

        if not requirements_list:
            requirements_list = []
        self.test_data = test_data if test_data else {
            "TestID": "",
            "LinkedRequirements": [],
            "TestMethod": "Analysis",
            "Status": "Pending",
            "TestDate": "",
            "Result": "Not Run"
        }

        layout = QFormLayout(self)

        self.id_input = QLineEdit(self.test_data["TestID"])
        self.id_input.setStyleSheet("background-color: #FFFFFF; color: #000000;")
        layout.addRow("Test ID:", self.id_input)

        self.req_list = QListWidget()
        self.req_list.setSelectionMode(QAbstractItemView.MultiSelection)
        self.req_list.setStyleSheet("background-color: #FFFFFF; color: #000000;")
        for req in requirements_list:
            item = QListWidgetItem(req["ID"])
            if req["ID"] in self.test_data["LinkedRequirements"]:
                item.setSelected(True)
            self.req_list.addItem(item)
        layout.addRow("Linked Requirements:", self.req_list)

        self.method_input = QComboBox()
        self.method_input.setStyleSheet("background-color: #FFFFFF; color: #000000;")
        methods = ["Inspection", "Analysis", "Demonstration", "Test"]
        self.method_input.addItems(methods)
        if self.test_data["TestMethod"] in methods:
            self.method_input.setCurrentText(self.test_data["TestMethod"])
        layout.addRow("Test Method:", self.method_input)

        self.status_input = QComboBox()
        self.status_input.setStyleSheet("background-color: #FFFFFF; color: #000000;")
        statuses = ["Pending", "In Progress", "Complete"]
        self.status_input.addItems(statuses)
        if self.test_data["Status"] in statuses:
            self.status_input.setCurrentText(self.test_data["Status"])
        layout.addRow("Status:", self.status_input)

        self.date_input = QLineEdit(self.test_data["TestDate"])
        self.date_input.setStyleSheet("background-color: #FFFFFF; color: #000000;")
        layout.addRow("Test Date (YYYY-MM-DD):", self.date_input)

        self.result_input = QComboBox()
        self.result_input.setStyleSheet("background-color: #FFFFFF; color: #000000;")
        results = ["Not Run", "Pass", "Fail"]
        self.result_input.addItems(results)
        if self.test_data["Result"] in results:
            self.result_input.setCurrentText(self.test_data["Result"])
        layout.addRow("Result:", self.result_input)

        btn_layout = QHBoxLayout()
        save_btn = QPushButton("Save")
        save_btn.setStyleSheet("background-color: #000000; color: #FFFFFF;")
        save_btn.clicked.connect(self.accept)
        cancel_btn = QPushButton("Cancel")
        cancel_btn.setStyleSheet("background-color: #000000; color: #FFFFFF;")
        cancel_btn.clicked.connect(self.reject)
        btn_layout.addWidget(save_btn)
        btn_layout.addWidget(cancel_btn)
        layout.addRow(btn_layout)

        self.setLayout(layout)

    def get_data(self):
        linked = []
        for i in range(self.req_list.count()):
            item = self.req_list.item(i)
            if item.isSelected():
                linked.append(item.text())
        return {
            "TestID": self.id_input.text(),
            "LinkedRequirements": linked,
            "TestMethod": self.method_input.currentText(),
            "Status": self.status_input.currentText(),
            "TestDate": self.date_input.text(),
            "Result": self.result_input.currentText()
        }

class BulkEditDialog(QDialog):
    def __init__(self, parent, req_ids):
        super().__init__(parent)
        self.setWindowTitle("Bulk Edit Requirements")
        self.setStyleSheet("background-color: #2E2E2E; color: #FFFFFF;")
        layout = QFormLayout(self)

        self.req_ids = req_ids

        self.priority_input = QComboBox()
        self.priority_input.setStyleSheet("background-color: #FFFFFF; color: #000000;")
        self.priority_input.addItems(["No Change", "Low", "Medium", "High", "Critical"])
        layout.addRow("Change Priority:", self.priority_input)

        self.status_input = QComboBox()
        self.status_input.setStyleSheet("background-color: #FFFFFF; color: #000000;")
        self.status_input.addItems(["No Change", "Proposed", "Approved", "Verified", "Validated", "Rejected"])
        layout.addRow("Change Status:", self.status_input)

        btn_layout = QHBoxLayout()
        apply_btn = QPushButton("Apply")
        apply_btn.setStyleSheet("background-color: #000000; color: #FFFFFF;")
        apply_btn.clicked.connect(self.accept)
        cancel_btn = QPushButton("Cancel")
        cancel_btn.setStyleSheet("background-color: #000000; color: #FFFFFF;")
        cancel_btn.clicked.connect(self.reject)
        btn_layout.addWidget(apply_btn)
        btn_layout.addWidget(cancel_btn)

        layout.addRow(btn_layout)
        self.setLayout(layout)

    def get_changes(self):
        priority = self.priority_input.currentText()
        status = self.status_input.currentText()
        return {
            "Priority": None if priority == "No Change" else priority,
            "Status": None if status == "No Change" else status
        }

class ReliabilityWidget(QWidget):
    def __init__(self, parent_app):
        super().__init__()
        self.parent_app=parent_app
        self.setStyleSheet("background-color:#2E2E2E;color:#FFFFFF;")

        self.data = {
            "Definition":"Reliability is the probability that a system performs...",
            "MTBF":"Mean Time Between Failures",
            "MTTR":"Mean Time To Repair",
            "BestPractices":["Redundancy","High-quality components","FMEA","Preventive maintenance"]
        }

        layout=QVBoxLayout(self)
        header=QLabel("Reliability Tools")
        header.setStyleSheet("font-size:20px;font-weight:bold;")
        layout.addWidget(header)

        def_label=QLabel(f"Definition:\n{self.data['Definition']}")
        def_label.setStyleSheet("color:#FFFFFF;")
        layout.addWidget(def_label)

        mtbf_label=QLabel(f"MTBF:\n{self.data['MTBF']}")
        mtbf_label.setStyleSheet("color:#FFFFFF;")
        layout.addWidget(mtbf_label)

        mttr_label=QLabel("MTTR:\nMean Time To Repair")
        mttr_label.setStyleSheet("color:#FFFFFF;")
        layout.addWidget(mttr_label)

        bp_label=QLabel("Best Practices:")
        bp_label.setStyleSheet("color:#FFFFFF;font-weight:bold;")
        layout.addWidget(bp_label)
        for bp in self.data["BestPractices"]:
            lbl=QLabel("- "+bp)
            lbl.setStyleSheet("color:#FFFFFF;")
            layout.addWidget(lbl)

        self.failure_rate_input=QLineEdit()
        self.failure_rate_input.setStyleSheet("background-color:#FFFFFF;color:#000000;")
        layout.addWidget(QLabel("Enter component failure rate (failures/hour):"))
        layout.addWidget(self.failure_rate_input)

        calc_btn=QPushButton("Calculate MTBF")
        calc_btn.setStyleSheet("background-color:#000000;color:#FFFFFF;")
        calc_btn.clicked.connect(self.calculate_mtbf)
        layout.addWidget(calc_btn)

        self.mtbf_result=QLabel("")
        self.mtbf_result.setStyleSheet("color:#FFFFFF;")
        layout.addWidget(self.mtbf_result)

        self.setLayout(layout)

    def calculate_mtbf(self):
        try:
            fr=float(self.failure_rate_input.text())
            if fr<=0:
                self.mtbf_result.setText("Failure rate must be positive.")
            else:
                mtbf=1.0/fr
                self.mtbf_result.setText(f"Calculated MTBF: {mtbf:.2f} hours")
        except:
            self.mtbf_result.setText("Invalid failure rate.")


class PhysicsSimulatorWidget(QWidget):
    def __init__(self,parent_app):
        super().__init__()
        self.parent_app=parent_app
        self.setStyleSheet("background-color:#2E2E2E;color:#FFFFFF;")
        layout=QVBoxLayout(self)

        header=QLabel("Physics Simulator")
        header.setStyleSheet("font-size:20px;font-weight:bold;")
        layout.addWidget(header)

        self.scenario_combo=QComboBox()
        self.scenario_combo.setStyleSheet("background-color:#FFFFFF;color:#000000;")
        self.scenario_combo.addItems(["Ball Drop (Earth)","Kickball on Mars","Block Sliding"])
        layout.addWidget(self.scenario_combo)

        self.run_button=QPushButton("Run Simulation")
        self.run_button.setStyleSheet("background-color:#000000;color:#FFFFFF;")
        self.run_button.clicked.connect(self.run_simulation)
        layout.addWidget(self.run_button)

        self.output=QTextEdit()
        self.output.setStyleSheet("background-color:#FFFFFF;color:#000000;")
        layout.addWidget(self.output)

        self.setLayout(layout)

    def run_simulation(self):
        scenario=self.scenario_combo.currentText()
        dt=0.1
        t_final=5.0
        t=0.0
        px,py,pz=0,0,0
        vx,vy,vz=0,0,0
        if scenario=="Ball Drop (Earth)":
            pz=10.0
            vz=0.0
            g=9.81
            log="Time\tHeight(m)\tVel(m/s)\n"
            while t<t_final:
                vz -= g*dt
                pz += vz*dt
                if pz<0:
                    pz=0
                    vz=0
                log+=f"{t:.1f}\t{pz:.2f}\t{vz:.2f}\n"
                t+=dt
            self.output.setPlainText(log)

        elif scenario=="Kickball on Mars":
            px=0; pz=0
            vx=5; vz=2
            g=3.71
            log="Time\tX(m)\tZ(m)\n"
            while t<t_final:
                vz-=g*dt
                px+=vx*dt
                pz+=vz*dt
                if pz<0:
                    pz=0;vz=0
                log+=f"{t:.1f}\t{px:.2f}\t{pz:.2f}\n"
                t+=dt
            self.output.setPlainText(log)

        elif scenario=="Block Sliding":
            px=0
            vx=3
            log="Time\tX(m)\tVel(m/s)\n"
            while t<t_final:
                px+=vx*dt
                log+=f"{t:.1f}\t{px:.2f}\t{vx:.2f}\n"
                t+=dt
            self.output.setPlainText(log)


class DoDAFNode(QGraphicsEllipseItem):
    def __init__(self, x,y,name):
        super().__init__(x,y,100,50)
        self.setBrush(QBrush(Qt.gray))
        self.setPen(QPen(Qt.black))
        self.name=name
        self.text=QGraphicsTextItem(name,self)
        self.text.setDefaultTextColor(Qt.black)
        self.text.setFont(QFont("Arial",10))
        b=self.boundingRect()
        self.text.setPos(b.width()/4,b.height()/4)
        self.setFlags(QGraphicsItem.ItemIsMovable | QGraphicsItem.ItemIsSelectable | QGraphicsItem.ItemIsFocusable)

class DoDAFEdge(QGraphicsLineItem):
    def __init__(self,start,end):
        super().__init__()
        self.start=start
        self.end=end
        self.setPen(QPen(Qt.black,2))
        self.itemFlowName=""

    def update_positions(self):
        p1=self.start.scenePos()
        p2=self.end.scenePos()
        self.setLine(p1.x()+50,p1.y()+25,p2.x()+50,p2.y()+25)

class DODAFBuilderWidget(QWidget):
    def __init__(self, parent_app):
        super().__init__()
        self.parent_app=parent_app
        self.setStyleSheet("background-color:#2E2E2E;color:#FFFFFF;")
        layout=QVBoxLayout(self)

        header=QLabel("DoDAF Builder - Drag nodes, double-click to rename, add flows")
        header.setStyleSheet("font-size:20px;font-weight:bold;")
        layout.addWidget(header)

        self.mode_combo=QComboBox()
        self.mode_combo.setStyleSheet("background-color:#FFFFFF;color:#000000;")
        self.mode_combo.addItems(["Select","Add Node","Add Flow","Rename Node"])
        layout.addWidget(self.mode_combo)

        self.scene=QGraphicsScene()
        self.view=QGraphicsView(self.scene)
        self.view.setStyleSheet("background-color:#FFFFFF;")
        layout.addWidget(self.view)

        self.nodes=[]
        self.edges=[]
        self.temp_flow_start=None

        self.view.setMouseTracking(True)
        self.view.setRenderHint(QPainter.Antialiasing)
        self.view.setContextMenuPolicy(Qt.CustomContextMenu)
        self.view.customContextMenuRequested.connect(self.context_menu)

        self.view.viewport().installEventFilter(self)

        self.setLayout(layout)

    def context_menu(self,pos):
        item=self.view.itemAt(pos)
        if item and isinstance(item,DoDAFEdge):
            flow_name,ok=QInputDialog.getText(self,"Item Flow Name","Enter flow name:")
            if ok:
                item.itemFlowName=flow_name
                self.scene.update()

    def eventFilter(self, source, event):
        if event.type()==event.MouseButtonPress and source is self.view.viewport():
            if event.button()==Qt.LeftButton:
                scene_pos=self.view.mapToScene(event.pos())
                mode=self.mode_combo.currentText()
                if mode=="Add Node":
                    node=DoDAFNode(scene_pos.x(), scene_pos.y(),f"Node{len(self.nodes)+1}")
                    self.scene.addItem(node)
                    self.nodes.append(node)
                elif mode=="Add Flow":
                    items=self.scene.items(scene_pos)
                    node=None
                    for i in items:
                        if isinstance(i,DoDAFNode):
                            node=i
                            break
                    if node:
                        if self.temp_flow_start is None:
                            self.temp_flow_start=node
                        else:
                            edge=DoDAFEdge(self.temp_flow_start,node)
                            self.scene.addItem(edge)
                            self.edges.append(edge)
                            edge.update_positions()
                            self.temp_flow_start=None
        if event.type()==event.MouseButtonDblClick and source is self.view.viewport():
            mode=self.mode_combo.currentText()
            if mode=="Rename Node":
                scene_pos=self.view.mapToScene(event.pos())
                items=self.scene.items(scene_pos)
                for i in items:
                    if isinstance(i,DoDAFNode):
                        new_name,ok=QInputDialog.getText(self,"Rename Node","New name:")
                        if ok:
                            i.name=new_name
                            i.text.setPlainText(new_name)
        return super().eventFilter(source,event)


class GlossaryWidget(QWidget):
    def __init__(self, parent_app, glossary_manager):
        super().__init__()
        self.parent_app=parent_app
        self.glossary_manager=glossary_manager
        self.setStyleSheet("background-color:#2E2E2E;color:#FFFFFF;")

        layout=QVBoxLayout(self)
        header=QLabel("Glossary (Subsystem Names & Definitions)")
        header.setStyleSheet("font-size:20px;font-weight:bold;")
        layout.addWidget(header)

        self.list=QTableWidget(0,2)
        self.list.setHorizontalHeaderLabels(["Term","Definition"])
        self.list.setStyleSheet("background-color:#FFFFFF;color:#000000;")
        self.list.horizontalHeader().setStretchLastSection(True)
        layout.addWidget(self.list)

        btn_layout=QHBoxLayout()
        add_btn=QPushButton("Add Term")
        add_btn.setStyleSheet("background-color:#000000;color:#FFFFFF;")
        add_btn.clicked.connect(self.add_term)
        del_btn=QPushButton("Delete Selected")
        del_btn.setStyleSheet("background-color:#000000;color:#FFFFFF;")
        del_btn.clicked.connect(self.delete_term)
        save_btn=QPushButton("Save Changes")
        save_btn.setStyleSheet("background-color:#000000;color:#FFFFFF;")
        save_btn.clicked.connect(self.save_changes)
        btn_layout.addWidget(add_btn)
        btn_layout.addWidget(del_btn)
        btn_layout.addWidget(save_btn)
        layout.addLayout(btn_layout)

        self.load_data()

        self.setLayout(layout)

    def load_data(self):
        data=self.glossary_manager.get_data()
        self.list.setRowCount(0)
        for term,definition in data.items():
            row=self.list.rowCount()
            self.list.insertRow(row)
            titem=QTableWidgetItem(term)
            ditem=QTableWidgetItem(definition)
            titem.setForeground(Qt.black)
            ditem.setForeground(Qt.black)
            self.list.setItem(row,0,titem)
            self.list.setItem(row,1,ditem)

    def add_term(self):
        term,ok=QInputDialog.getText(self,"Add Term","Term:")
        if ok and term:
            definition,ok2=QInputDialog.getText(self,"Add Definition","Definition:")
            if ok2:
                row=self.list.rowCount()
                self.list.insertRow(row)
                titem=QTableWidgetItem(term)
                ditem=QTableWidgetItem(definition)
                titem.setForeground(Qt.black)
                ditem.setForeground(Qt.black)
                self.list.setItem(row,0,titem)
                self.list.setItem(row,1,ditem)

    def delete_term(self):
        rows=self.list.selectionModel().selectedRows()
        for r in reversed(rows):
            self.list.removeRow(r.row())

    def save_changes(self):
        new_data={}
        for r in range(self.list.rowCount()):
            term=self.list.item(r,0).text()
            definition=self.list.item(r,1).text()
            new_data[term]=definition
        self.glossary_manager.subsystems=new_data
        QMessageBox.information(self,"Saved","Glossary updated.")


class TestVerificationWidget(QWidget):
    def __init__(self, parent_app, requirements_manager):
        super().__init__()
        self.parent_app=parent_app
        self.requirements_manager=requirements_manager
        self.setStyleSheet("background-color:#2E2E2E;color:#FFFFFF;")
        layout=QVBoxLayout(self)

        header=QLabel("Test Verification")
        header.setStyleSheet("font-size:20px;font-weight:bold;")
        layout.addWidget(header)

        controls=QHBoxLayout()
        self.status_filter=QComboBox()
        self.status_filter.setStyleSheet("background-color:#FFFFFF;color:#000000;")
        self.status_filter.addItems(["All","Pending","In Progress","Complete"])
        self.status_filter.currentTextChanged.connect(self.apply_filters)
        controls.addWidget(QLabel("Status Filter:"))
        controls.addWidget(self.status_filter)

        self.date_filter=QLineEdit()
        self.date_filter.setStyleSheet("background-color:#FFFFFF;color:#000000;")
        self.date_filter.setPlaceholderText("Date filter (YYYY-MM-DD) or empty")
        self.date_filter.textChanged.connect(self.apply_filters)
        controls.addWidget(QLabel("Date Filter:"))
        controls.addWidget(self.date_filter)

        self.search_test=QLineEdit()
        self.search_test.setStyleSheet("background-color:#FFFFFF;color:#000000;")
        self.search_test.setPlaceholderText("Search by TestID...")
        self.search_test.textChanged.connect(self.apply_filters)
        controls.addWidget(self.search_test)

        add_btn=QPushButton("Add Test")
        add_btn.setStyleSheet("background-color:#000000;color:#FFFFFF;")
        add_btn.clicked.connect(self.add_test)
        controls.addWidget(add_btn)

        edit_btn=QPushButton("Edit Selected")
        edit_btn.setStyleSheet("background-color:#000000;color:#FFFFFF;")
        edit_btn.clicked.connect(self.edit_selected_test)
        controls.addWidget(edit_btn)

        del_btn=QPushButton("Delete Selected")
        del_btn.setStyleSheet("background-color:#000000;color:#FFFFFF;")
        del_btn.clicked.connect(self.delete_selected_test)
        controls.addWidget(del_btn)

        layout.addLayout(controls)

        self.test_table=QTableWidget(0,5)
        self.test_table.setHorizontalHeaderLabels(["TestID","LinkedReqs","TestMethod","Status","Result"])
        self.test_table.setStyleSheet("background-color:#FFFFFF;color:#000000;")
        self.test_table.horizontalHeader().setStretchLastSection(True)
        self.test_table.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.test_table.setSelectionMode(QAbstractItemView.SingleSelection)
        layout.addWidget(self.test_table)

        self.tests_data={}
        self.apply_filters()

        self.setLayout(layout)

    def apply_filters(self):
        status=self.status_filter.currentText()
        dt_filter=self.date_filter.text()
        search=self.search_test.text().lower()

        filtered=[]
        for t in self.tests_data.values():
            if status!="All" and t["Status"]!=status:
                continue
            if dt_filter and t["TestDate"] and not t["TestDate"].startswith(dt_filter):
                continue
            txt=(t["TestID"]).lower()
            if search and search not in txt:
                continue
            filtered.append(t)

        self.test_table.setRowCount(0)
        for tdata in filtered:
            row=self.test_table.rowCount()
            self.test_table.insertRow(row)
            self.add_test_to_row(row,tdata)

    def add_test_to_row(self,row,t):
        items=[
            QTableWidgetItem(t["TestID"]),
            QTableWidgetItem(",".join(t["LinkedRequirements"])),
            QTableWidgetItem(t["TestMethod"]),
            QTableWidgetItem(t["Status"]),
            QTableWidgetItem(t["Result"])
        ]
        for it in items:
            it.setForeground(Qt.black)
        for c,itm in enumerate(items):
            self.test_table.setItem(row,c,itm)

    def add_test(self):
        reqs = self.requirements_manager.get_data()
        dlg = TestDetailDialog(self, "Add Test", test_data=None, requirements_list=reqs)
        if dlg.exec_()==QDialog.Accepted:
            td=dlg.get_data()
            self.tests_data[td["TestID"]]=td
            self.apply_filters()

    def edit_selected_test(self):
        rows=self.test_table.selectionModel().selectedRows()
        if not rows:
            return
        row=rows[0].row()
        test_id=self.test_table.item(row,0).text()
        reqs=self.requirements_manager.get_data()
        dlg=TestDetailDialog(self,"Edit Test",self.tests_data[test_id],reqs)
        if dlg.exec_()==QDialog.Accepted:
            nd=dlg.get_data()
            self.tests_data[test_id]=nd
            self.apply_filters()

    def delete_selected_test(self):
        rows=self.test_table.selectionModel().selectedRows()
        for r in reversed(rows):
            test_id=self.test_table.item(r.row(),0).text()
            if test_id in self.tests_data:
                del self.tests_data[test_id]
            self.test_table.removeRow(r.row())

    def get_data(self):
        return list(self.tests_data.values())

    def load_data(self, tests, reqs_data):
        self.tests_data={t["TestID"]:t for t in tests}
        self.apply_filters()


class ActionManagerWidget(QWidget):
    def __init__(self, parent_app):
        super().__init__()
        self.parent_app=parent_app
        self.setStyleSheet("background-color:#2E2E2E;color:#FFFFFF;")
        layout=QVBoxLayout(self)

        header=QLabel("Action Manager")
        header.setStyleSheet("font-size:20px;font-weight:bold;")
        layout.addWidget(header)

        self.actions_table=QTableWidget(0,3)
        self.actions_table.setHorizontalHeaderLabels(["Action ID","Description","Status"])
        self.actions_table.setStyleSheet("background-color:#FFFFFF;color:#000000;")
        self.actions_table.horizontalHeader().setStretchLastSection(True)
        layout.addWidget(self.actions_table)

        btn_layout=QHBoxLayout()
        self.add_action_button=QPushButton("Add Action")
        self.add_action_button.setStyleSheet("background-color:#000000;color:#FFFFFF;")
        self.add_action_button.clicked.connect(self.add_action)
        self.delete_action_button=QPushButton("Delete Action")
        self.delete_action_button.setStyleSheet("background-color:#000000;color:#FFFFFF;")
        self.delete_action_button.clicked.connect(self.delete_action)
        btn_layout.addWidget(self.add_action_button)
        btn_layout.addWidget(self.delete_action_button)
        layout.addLayout(btn_layout)

        self.actions_data={}
        self.setLayout(layout)

    def add_action(self):
        aid,ok=QInputDialog.getText(self,"Add Action","Action ID:")
        if ok and aid:
            desc,ok2=QInputDialog.getText(self,"Add Action","Description:")
            if ok2:
                row=self.actions_table.rowCount()
                self.actions_table.insertRow(row)
                items=[QTableWidgetItem(aid),QTableWidgetItem(desc),QTableWidgetItem("Pending")]
                for it in items:
                    it.setForeground(Qt.black)
                for c,itm in enumerate(items):
                    self.actions_table.setItem(row,c,itm)
                self.actions_data[aid]={"Action ID":aid,"Description":desc,"Status":"Pending"}

    def delete_action(self):
        rows=self.actions_table.selectionModel().selectedRows()
        for r in reversed(rows):
            aid=self.actions_table.item(r.row(),0).text()
            if aid in self.actions_data:
                del self.actions_data[aid]
            self.actions_table.removeRow(r.row())

    def get_data(self):
        return list(self.actions_data.values())

    def load_data(self, actions):
        self.actions_data={a["Action ID"]:a for a in actions}
        self.actions_table.setRowCount(0)
        for a in actions:
            row=self.actions_table.rowCount()
            self.actions_table.insertRow(row)
            items=[QTableWidgetItem(a["Action ID"]),QTableWidgetItem(a["Description"]),QTableWidgetItem(a["Status"])]
            for it in items:
                it.setForeground(Qt.black)
            for c,itm in enumerate(items):
                self.actions_table.setItem(row,c,itm)


class CADModelsWidget(QWidget):
    def __init__(self, parent_app):
        super().__init__()
        self.parent_app=parent_app
        self.setStyleSheet("background-color:#2E2E2E;color:#FFFFFF;")
        layout=QVBoxLayout(self)

        header=QLabel("CAD Models")
        header.setStyleSheet("font-size:20px;font-weight:bold;")
        layout.addWidget(header)

        label=QLabel("If model.stl exists, it would load here. Currently just a placeholder.")
        label.setStyleSheet("color:#FFFFFF;")
        layout.addWidget(label)

        self.setLayout(layout)


class JiraIntegrationWidget(QWidget):
    def __init__(self,parent_app):
        super().__init__()
        self.parent_app=parent_app
        self.setStyleSheet("background-color:#2E2E2E;color:#FFFFFF;")
        layout=QVBoxLayout(self)
        header=QLabel("JIRA Integration (Aesthetic Only)")
        header.setStyleSheet("font-size:20px;font-weight:bold;")
        layout.addWidget(header)
        jira_label=QLabel("Imagine linking with a JIRA board for issue tracking!")
        jira_label.setStyleSheet("color:#FFFFFF;")
        layout.addWidget(jira_label)
        self.setLayout(layout)


class SystemStateWidget(QWidget):
    def __init__(self, parent_app):
        super().__init__()
        self.parent_app=parent_app
        self.setStyleSheet("background-color:#2E2E2E;color:#FFFFFF;")
        layout=QVBoxLayout(self)

        header=QLabel("Systems Engineering State")
        header.setStyleSheet("font-size:20px;font-weight:bold;")
        layout.addWidget(header)

        self.state_selector=QComboBox()
        self.state_selector.addItems(["Concept Development","Requirements Analysis","Design","Implementation","Integration","Verification","Validation"])
        self.state_selector.setStyleSheet("background-color:#3E3E3E;color:#FFFFFF;")
        self.state_selector.currentTextChanged.connect(self.update_stage)
        layout.addWidget(self.state_selector)

        self.current_state_label=QLabel("Current State: Concept Development")
        self.current_state_label.setStyleSheet("font-size:16px;color:#FFFFFF;")
        layout.addWidget(self.current_state_label)

        self.setLayout(layout)

    def update_stage(self, state):
        self.current_state_label.setText(f"Current State: {state}")
        self.parent_app.update_system_state(state)


class CONOPSWidget(QWidget):
    def __init__(self, parent_app):
        super().__init__()
        self.parent_app=parent_app
        self.setStyleSheet("background-color:#2E2E2E;color:#FFFFFF;")

        self.data = {
            "PurposeScope": "",
            "SystemOverview": "",
            "OperationalContext": "",
            "KeyStakeholders": "",
            "OperationalScenarios": "",
            "SystemCapabilities": "",
            "OperationalConstraints": "",
            "ImplementationConsiderations": "",
            "RiskManagement": "",
            "MetricsForSuccess": ""
        }

        layout=QVBoxLayout(self)
        header=QLabel("CONOPS")
        header.setStyleSheet("font-size:20px;font-weight:bold;")
        layout.addWidget(header)

        form_layout=QFormLayout()

        self.purpose_input=QTextEdit()
        self.purpose_input.setStyleSheet("background-color:#FFFFFF;color:#000000;")
        form_layout.addRow("Purpose and Scope:",self.purpose_input)

        self.overview_input=QTextEdit()
        self.overview_input.setStyleSheet("background-color:#FFFFFF;color:#000000;")
        form_layout.addRow("System Overview:",self.overview_input)

        self.context_input=QTextEdit()
        self.context_input.setStyleSheet("background-color:#FFFFFF;color:#000000;")
        form_layout.addRow("Operational Context:",self.context_input)

        self.stakeholders_input=QTextEdit()
        self.stakeholders_input.setStyleSheet("background-color:#FFFFFF;color:#000000;")
        form_layout.addRow("Key Stakeholders:",self.stakeholders_input)

        self.scenarios_input=QTextEdit()
        self.scenarios_input.setStyleSheet("background-color:#FFFFFF;color:#000000;")
        form_layout.addRow("Operational Scenarios:",self.scenarios_input)

        self.capabilities_input=QTextEdit()
        self.capabilities_input.setStyleSheet("background-color:#FFFFFF;color:#000000;")
        form_layout.addRow("System Capabilities:",self.capabilities_input)

        self.constraints_input=QTextEdit()
        self.constraints_input.setStyleSheet("background-color:#FFFFFF;color:#000000;")
        form_layout.addRow("Operational Constraints:",self.constraints_input)

        self.implementation_input=QTextEdit()
        self.implementation_input.setStyleSheet("background-color:#FFFFFF;color:#000000;")
        form_layout.addRow("Implementation Considerations:",self.implementation_input)

        self.risk_input=QTextEdit()
        self.risk_input.setStyleSheet("background-color:#FFFFFF;color:#000000;")
        form_layout.addRow("Risk Management:",self.risk_input)

        self.metrics_input=QTextEdit()
        self.metrics_input.setStyleSheet("background-color:#FFFFFF;color:#000000;")
        form_layout.addRow("Metrics for Success:",self.metrics_input)

        layout.addLayout(form_layout)
        self.setLayout(layout)

    def get_data(self):
        return {
            "PurposeScope": self.purpose_input.toPlainText(),
            "SystemOverview": self.overview_input.toPlainText(),
            "OperationalContext": self.context_input.toPlainText(),
            "KeyStakeholders": self.stakeholders_input.toPlainText(),
            "OperationalScenarios": self.scenarios_input.toPlainText(),
            "SystemCapabilities": self.capabilities_input.toPlainText(),
            "OperationalConstraints": self.constraints_input.toPlainText(),
            "ImplementationConsiderations": self.implementation_input.toPlainText(),
            "RiskManagement": self.risk_input.toPlainText(),
            "MetricsForSuccess": self.metrics_input.toPlainText()
        }

    def load_data(self,data):
        if data:
            self.purpose_input.setPlainText(data.get("PurposeScope",""))
            self.overview_input.setPlainText(data.get("SystemOverview",""))
            self.context_input.setPlainText(data.get("OperationalContext",""))
            self.stakeholders_input.setPlainText(data.get("KeyStakeholders",""))
            self.scenarios_input.setPlainText(data.get("OperationalScenarios",""))
            self.capabilities_input.setPlainText(data.get("SystemCapabilities",""))
            self.constraints_input.setPlainText(data.get("OperationalConstraints",""))
            self.implementation_input.setPlainText(data.get("ImplementationConsiderations",""))
            self.risk_input.setPlainText(data.get("RiskManagement",""))
            self.metrics_input.setPlainText(data.get("MetricsForSuccess",""))


class HomePageWidget(QWidget):
    def __init__(self, parent_app):
        super().__init__()
        self.parent_app=parent_app
        self.setStyleSheet("background-color:#2E2E2E;color:#FFFFFF;")
        layout=QVBoxLayout(self)
        layout.setAlignment(Qt.AlignCenter)

        logo_label=QLabel("MBSE Tool")
        logo_label.setStyleSheet("font-size:48px;font-weight:bold;color:#FFFFFF;")
        logo_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(logo_label)

        subtitle=QLabel("Engineering Development Suite")
        subtitle.setStyleSheet("font-size:24px;color:#AAAAAA;")
        subtitle.setAlignment(Qt.AlignCenter)
        layout.addWidget(subtitle)

        spacer=QLabel("")
        spacer.setMinimumHeight(50)
        layout.addWidget(spacer)

        button_layout=QHBoxLayout()
        new_project_btn=QPushButton("Create New Project")
        new_project_btn.setStyleSheet("background-color:#000000;color:#FFFFFF;font-size:20px;padding:10px;")
        new_project_btn.clicked.connect(self.create_new_project)

        load_project_btn=QPushButton("Load Previous Project")
        load_project_btn.setStyleSheet("background-color:#000000;color:#FFFFFF;font-size:20px;padding:10px;")
        load_project_btn.clicked.connect(self.load_previous_project)

        button_layout.addWidget(new_project_btn)
        button_layout.addWidget(load_project_btn)
        layout.addLayout(button_layout)
        self.setLayout(layout)

    def create_new_project(self):
        project_name,_=QFileDialog.getSaveFileName(self,"New Project","","JSON Files (*.json)")
        if project_name:
            if not project_name.endswith(".json"):
                project_name += ".json"
            with open(project_name,'w') as f:
                json.dump({},f)
            self.parent_app.update_project_name(os.path.basename(project_name).replace(".json",""))

    def load_previous_project(self):
        project_path,_=QFileDialog.getOpenFileName(self,"Load Project","","JSON Files (*.json)")
        if project_path:
            with open(project_path,'r') as f:
                project_data=json.load(f)
                self.parent_app.update_project_name(os.path.basename(project_path).replace(".json",""))
                self.parent_app.requirements_manager.load_data(project_data.get("requirements",[]))
                self.parent_app.test_verification.load_data(project_data.get("tests",[]), self.parent_app.requirements_manager.get_data())
                self.parent_app.system_decomposition.load_data(project_data.get("system_decomposition",[]))
                self.parent_app.conops_widget.load_data(project_data.get("conops",{}))
                self.parent_app.physics_simulator.load_data(project_data.get("physics",{}))
                self.parent_app.action_manager.load_data(project_data.get("actions",[]))
                self.parent_app.update_system_state(project_data.get("system_state","Concept Development"))


# RequirementsManagerWidget definition:
class RequirementsManagerWidget(QWidget):
    def __init__(self, parent_app, glossary_manager):
        super().__init__()
        self.parent_app = parent_app
        self.glossary_manager = glossary_manager
        self.setStyleSheet("background-color:#2E2E2E;color:#FFFFFF;")
        layout=QVBoxLayout(self)

        header=QLabel("Requirements Manager")
        header.setStyleSheet("font-size:20px;font-weight:bold;")
        layout.addWidget(header)

        control_layout=QHBoxLayout()

        self.view_mode_combo=QComboBox()
        self.view_mode_combo.setStyleSheet("background-color:#FFFFFF;color:#000000;")
        self.view_mode_combo.addItems(["Tree View","Table View"])
        self.view_mode_combo.currentTextChanged.connect(self.apply_filters)
        control_layout.addWidget(QLabel("View Mode:"))
        control_layout.addWidget(self.view_mode_combo)

        self.category_filter=QComboBox()
        self.category_filter.setStyleSheet("background-color:#FFFFFF;color:#000000;")
        self.category_filter.addItems(["All","Functional","Non-Functional","Interface","Performance","Regulatory","Constraint","Derived"])
        self.category_filter.currentTextChanged.connect(self.apply_filters)
        control_layout.addWidget(QLabel("Category Filter:"))
        control_layout.addWidget(self.category_filter)

        self.show_archived_check=QCheckBox("Show Archived")
        self.show_archived_check.setStyleSheet("color:#FFFFFF;")
        self.show_archived_check.stateChanged.connect(self.apply_filters)
        control_layout.addWidget(self.show_archived_check)

        self.search_input=QLineEdit()
        self.search_input.setStyleSheet("background-color:#FFFFFF;color:#000000;")
        self.search_input.setPlaceholderText("Search by ID/Description...")
        self.search_input.textChanged.connect(self.apply_filters)
        control_layout.addWidget(self.search_input)

        bulk_btn=QPushButton("Bulk Edit")
        bulk_btn.setStyleSheet("background-color:#000000;color:#FFFFFF;")
        bulk_btn.clicked.connect(self.bulk_edit)
        control_layout.addWidget(bulk_btn)

        import_btn=QPushButton("Import CSV")
        import_btn.setStyleSheet("background-color:#000000;color:#FFFFFF;")
        import_btn.clicked.connect(self.import_csv)
        control_layout.addWidget(import_btn)

        export_btn=QPushButton("Export CSV")
        export_btn.setStyleSheet("background-color:#000000;color:#FFFFFF;")
        export_btn.clicked.connect(self.export_csv)
        control_layout.addWidget(export_btn)

        layout.addLayout(control_layout)

        self.tree=QTreeWidget()
        self.tree.setHeaderLabels(["Requirement ID"])
        self.tree.setStyleSheet("background-color:#3E3E3E;color:#FFFFFF;")
        self.tree.itemDoubleClicked.connect(self.edit_requirement)
        layout.addWidget(self.tree)

        self.table=QTableWidget(0,6)
        self.table.setHorizontalHeaderLabels(["ID","Category","Priority","Status","AssignedTo","Coverage%"])
        self.table.setStyleSheet("background-color:#FFFFFF;color:#000000;")
        self.table.horizontalHeader().setStretchLastSection(True)
        self.table.setVisible(False)
        self.table.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.table.setSelectionMode(QAbstractItemView.SingleSelection)
        self.table.cellDoubleClicked.connect(self.table_edit_req)
        layout.addWidget(self.table)

        self.reqs_data={}
        self.apply_filters()

        self.setLayout(layout)

    def apply_filters(self):
        cat=self.category_filter.currentText()
        show_arch=self.show_archived_check.isChecked()
        search=self.search_input.text().lower()

        filtered=[]
        for r in self.reqs_data.values():
            if cat!="All" and r["Category"]!=cat:
                continue
            if not show_arch and r["Archived"]:
                continue
            txt=(r["ID"]+" "+r["Description"]).lower()
            if search and search not in txt:
                continue
            filtered.append(r)

        mode=self.view_mode_combo.currentText()
        if mode=="Tree View":
            self.tree.setVisible(True)
            self.table.setVisible(False)
            self.tree.clear()
            for r in filtered:
                QTreeWidgetItem(self.tree,[r["ID"]])
        else:
            self.tree.setVisible(False)
            self.table.setVisible(True)
            self.table.setRowCount(0)
            for r in filtered:
                row=self.table.rowCount()
                self.table.insertRow(row)
                self.add_req_to_table(row,r)

    def add_req_to_table(self, row, r):
        coverage=self.calculate_coverage(r)
        items=[
            QTableWidgetItem(r["ID"]),
            QTableWidgetItem(r["Category"]),
            QTableWidgetItem(r["Priority"]),
            QTableWidgetItem(r["Status"]),
            QTableWidgetItem(r["AssignedTo"]),
            QTableWidgetItem(f"{coverage}%")
        ]
        for it in items:
            it.setForeground(Qt.black)
        for c,it in enumerate(items):
            self.table.setItem(row,c,it)

    def calculate_coverage(self,r):
        return 0

    def bulk_edit(self):
        selected_ids=[]
        mode=self.view_mode_combo.currentText()
        if mode=="Tree View":
            items=self.tree.selectedItems()
            for i in items:
                req_id=i.text(0)
                if req_id in self.reqs_data:
                    selected_ids.append(req_id)
        else:
            rows=self.table.selectionModel().selectedRows()
            for r in rows:
                req_id=self.table.item(r.row(),0).text()
                selected_ids.append(req_id)
        if not selected_ids:
            QMessageBox.information(self,"No selection","No requirements selected.")
            return
        dlg=BulkEditDialog(self, selected_ids)
        if dlg.exec_()==QDialog.Accepted:
            changes=dlg.get_changes()
            for req_id in selected_ids:
                if changes["Priority"] is not None:
                    self.reqs_data[req_id]["Priority"]=changes["Priority"]
                if changes["Status"] is not None:
                    self.reqs_data[req_id]["Status"]=changes["Status"]
            self.apply_filters()

    def import_csv(self):
        fname,_=QFileDialog.getOpenFileName(self,"Import CSV","","CSV Files (*.csv)")
        if not fname:
            return
        with open(fname,'r',newline='') as f:
            reader=csv.DictReader(f)
            for row in reader:
                req_id=row["ID"]
                row["Archived"]=(row.get("Archived","False")=="True")
                self.reqs_data[req_id]=row
            self.apply_filters()

    def export_csv(self):
        fname,_=QFileDialog.getSaveFileName(self,"Export CSV","","CSV Files (*.csv)")
        if not fname:
            return
        fieldnames=["ID","Description","Category","Source","Rationale","AcceptanceCriteria","Traceability",
                    "VerificationMethod","Priority","Status","AssignedTo","DerivedFrom","Archived"]
        with open(fname,'w',newline='') as f:
            writer=csv.DictWriter(f,fieldnames=fieldnames)
            writer.writeheader()
            for r in self.reqs_data.values():
                writer.writerow(r)
        QMessageBox.information(self,"Exported","Requirements exported to CSV.")

    def edit_requirement(self, item, col):
        req_id=item.text(0)
        if req_id in self.reqs_data:
            dlg=RequirementDetailDialog(self,"Edit Requirement", self.reqs_data[req_id])
            if dlg.exec_()==QDialog.Accepted:
                new_data=dlg.get_data()
                self.reqs_data[req_id]=new_data
                self.apply_filters()

    def table_edit_req(self, row,col):
        req_id=self.table.item(row,0).text()
        if req_id in self.reqs_data:
            dlg=RequirementDetailDialog(self,"Edit Requirement", self.reqs_data[req_id])
            if dlg.exec_()==QDialog.Accepted:
                nd=dlg.get_data()
                self.reqs_data[req_id]=nd
                self.apply_filters()

    def get_data(self):
        return list(self.reqs_data.values())

    def load_data(self, requirements):
        self.reqs_data={r["ID"]:r for r in requirements}
        self.apply_filters()


class MBSETool(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("MBSE Tool - Engineering Development Suite")
        self.setGeometry(100,100,1600,900)
        self.setStyleSheet("background-color:#1E1E1E;color:#FFFFFF;")

        self.project_name="Untitled Project"
        self.system_state="Concept Development"
        self.glossary_manager=GlossaryManager()

        self.central_widget=QWidget()
        self.setCentralWidget(self.central_widget)
        main_layout=QVBoxLayout(self.central_widget)

        header_layout=QHBoxLayout()
        self.header=QLabel(f"MBSE Tool - {self.project_name} ({self.system_state})")
        self.header.setStyleSheet("font-size:28px;font-weight:bold;color:#FFFFFF;")
        self.header.setAlignment(Qt.AlignCenter)
        header_layout.addWidget(self.header)

        self.save_button=QPushButton("Save Project")
        self.save_button.setStyleSheet("background-color:#000000;color:#FFFFFF;")
        self.save_button.clicked.connect(self.save_project)
        header_layout.addWidget(self.save_button)

        main_layout.addLayout(header_layout)

        self.tabs=QTabWidget()
        self.tabs.setStyleSheet("""
        QTabBar::tab {background:#2E2E2E;color:#FFFFFF;padding:10px;font-weight:bold;}
        QTabBar::tab:selected {background:#4E4E4E;}
        """)
        main_layout.addWidget(self.tabs)

        self.home_page=HomePageWidget(self)

        class SystemDecompositionWidget(QWidget):
            def __init__(self, parent_app):
                super().__init__()
                self.parent_app=parent_app
                self.setStyleSheet("background-color:#2E2E2E;color:#FFFFFF;")
                layout=QVBoxLayout(self)
                header=QLabel("System Decomposition")
                header.setStyleSheet("font-size:20px;font-weight:bold;")
                layout.addWidget(header)

                self.decomp_table=QTableWidget(0,3)
                self.decomp_table.setHorizontalHeaderLabels(["ID","Level","Description"])
                self.decomp_table.setStyleSheet("background-color:#FFFFFF;color:#000000;")
                self.decomp_table.horizontalHeader().setStretchLastSection(True)
                layout.addWidget(self.decomp_table)

                btn_layout=QHBoxLayout()
                add_btn=QPushButton("Add Decomposition")
                add_btn.setStyleSheet("background-color:#000000;color:#FFFFFF;")
                add_btn.clicked.connect(self.add_decomposition)
                edit_btn=QPushButton("Edit Decomposition")
                edit_btn.setStyleSheet("background-color:#000000;color:#FFFFFF;")
                edit_btn.clicked.connect(self.edit_decomposition)
                del_btn=QPushButton("Delete")
                del_btn.setStyleSheet("background-color:#000000;color:#FFFFFF;")
                del_btn.clicked.connect(self.delete_decomposition)
                btn_layout.addWidget(add_btn)
                btn_layout.addWidget(edit_btn)
                btn_layout.addWidget(del_btn)
                layout.addLayout(btn_layout)

                self.decompositions={}
                self.setLayout(layout)

            def add_decomposition(self):
                dlg=RequirementDialogDecomposition(self,"Add Decomposition")
                if dlg.exec_()==QDialog.Accepted:
                    dec_id, details=dlg.get_data()
                    self.decompositions[dec_id]=details
                    self.refresh_table()

            def edit_decomposition(self):
                rows=self.decomp_table.selectionModel().selectedRows()
                if not rows:
                    return
                row=rows[0].row()
                dec_id=self.decomp_table.item(row,0).text()
                dlg=RequirementDialogDecomposition(self,"Edit Decomposition", dec_id,self.decompositions[dec_id])
                if dlg.exec_()==QDialog.Accepted:
                    did, dt=dlg.get_data()
                    del self.decompositions[dec_id]
                    self.decompositions[did]=dt
                    self.refresh_table()

            def delete_decomposition(self):
                rows=self.decomp_table.selectionModel().selectedRows()
                for r in reversed(rows):
                    dec_id=self.decomp_table.item(r.row(),0).text()
                    del self.decompositions[dec_id]
                    self.decomp_table.removeRow(r.row())

            def refresh_table(self):
                self.decomp_table.setRowCount(0)
                for dec_id, details in self.decompositions.items():
                    row=self.decomp_table.rowCount()
                    self.decomp_table.insertRow(row)
                    items=[QTableWidgetItem(dec_id),QTableWidgetItem(details["Level"]),QTableWidgetItem(details["Description"])]
                    for it in items:
                        it.setForeground(Qt.black)
                    for c,it in enumerate(items):
                        self.decomp_table.setItem(row,c,it)

            def get_data(self):
                return [{"ID":d,**dt} for d,dt in self.decompositions.items()]

            def load_data(self, data):
                self.decompositions={d["ID"]:{ "Level":d["Level"],"Description":d["Description"]} for d in data}
                self.refresh_table()

        self.requirements_manager=RequirementsManagerWidget(self,self.glossary_manager)
        self.system_state_tracker=SystemStateWidget(self)
        self.conops_widget=CONOPSWidget(self)
        self.system_decomposition=SystemDecompositionWidget(self)
        self.dodaf_builder=DODAFBuilderWidget(self)
        self.action_manager=ActionManagerWidget(self)
        self.physics_simulator=PhysicsSimulatorWidget(self)
        self.jira_integration=JiraIntegrationWidget(self)
        self.reliability_widget=ReliabilityWidget(self)
        self.glossary_widget=GlossaryWidget(self,self.glossary_manager)
        self.test_verification=TestVerificationWidget(self,self.requirements_manager)
        self.cad_models=CADModelsWidget(self)

        self.tabs.addTab(self.home_page,"Home")
        self.tabs.addTab(self.requirements_manager,"Requirements")
        self.tabs.addTab(self.system_state_tracker,"Systems Engineering State")
        self.tabs.addTab(self.conops_widget,"CONOPS")
        self.tabs.addTab(self.system_decomposition,"System Decomposition")
        self.tabs.addTab(self.dodaf_builder,"DoDAF Builder")
        self.tabs.addTab(self.action_manager,"Action Manager")
        self.tabs.addTab(self.test_verification,"Test Verification")
        self.tabs.addTab(self.cad_models,"CAD Models")
        self.tabs.addTab(self.physics_simulator,"Physics Simulator")
        self.tabs.addTab(self.jira_integration,"JIRA Integration")
        self.tabs.addTab(self.reliability_widget,"Reliability")
        self.tabs.addTab(self.glossary_widget,"Glossary")

    def update_project_name(self,name):
        self.project_name=name
        self.update_header()

    def update_system_state(self,state):
        self.system_state=state
        self.update_header()

    def update_header(self):
        self.header.setText(f"MBSE Tool - {self.project_name} ({self.system_state})")

    def save_project(self):
        fname,_=QFileDialog.getSaveFileName(self,"Save Project","","JSON Files (*.json)")
        if fname:
            if not fname.endswith(".json"):
                fname+=".json"
            data={
                "requirements": self.requirements_manager.get_data(),
                "actions": self.action_manager.get_data(),
                "tests": self.test_verification.get_data(),
                "system_state": self.system_state,
                "system_decomposition": self.system_decomposition.get_data(),
                "conops": self.conops_widget.get_data(),
                "physics": self.physics_simulator.get_data()
            }
            with open(fname,'w') as f:
                json.dump(data,f)
            self.update_project_name(os.path.basename(fname).replace(".json",""))


def launch_mbse_tool():
    app=QApplication(sys.argv)
    window=MBSETool()
    window.show()
    app.exec_()

if __name__=="__main__":
    launch_mbse_tool()
