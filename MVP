import os
import sys
import json
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QVBoxLayout, QHBoxLayout, QTabWidget, QLabel, QPushButton, QFileDialog,
    QWidget, QTableWidget, QTableWidgetItem, QComboBox, QProgressBar, QGraphicsView, QGraphicsScene,
    QGraphicsEllipseItem, QGraphicsLineItem, QGraphicsTextItem, QTreeWidget, QTreeWidgetItem, QDialog,
    QFormLayout, QLineEdit, QTextEdit
)
from PyQt5.QtCore import Qt, QPointF
from PyQt5.QtGui import QPen, QFont


class MBSETool(QMainWindow):
    """Main Application integrating all widgets."""
    def __init__(self):
        super().__init__()
        self.setWindowTitle("MBSE Tool - Engineering Development Suite")
        self.setGeometry(100, 100, 1600, 900)
        self.setStyleSheet("background-color: #1E1E1E; color: #FFFFFF;")

        self.project_name = "Untitled Project"
        self.system_state = "Concept Development"

        self.central_widget = QWidget()
        self.setCentralWidget(self.central_widget)
        main_layout = QVBoxLayout(self.central_widget)

        # Header with Save Button
        header_layout = QHBoxLayout()
        self.header = QLabel(f"MBSE Tool - {self.project_name} ({self.system_state})")
        self.header.setStyleSheet("font-size: 28px; font-weight: bold; color: #FFFFFF;")
        self.header.setAlignment(Qt.AlignCenter)
        header_layout.addWidget(self.header)

        self.save_button = QPushButton("Save Project")
        self.save_button.setStyleSheet("background-color: #000000; color: #FFFFFF;")
        self.save_button.clicked.connect(self.save_project)
        header_layout.addWidget(self.save_button)

        main_layout.addLayout(header_layout)

        # Tabs for Modules
        self.tabs = QTabWidget()
        self.tabs.setStyleSheet("""
            QTabBar::tab { background: #2E2E2E; color: #FFFFFF; padding: 10px; }
            QTabBar::tab:selected { background: #4E4E4E; }
        """)
        main_layout.addWidget(self.tabs)

        # Add Modules
        self.project_manager = ProjectManagerWidget(self)
        self.requirements_manager = RequirementsManagerWidget(self)
        self.system_state_tracker = SystemStateWidget(self)
        self.dodaf_builder = DODAFBuilderWidget(self)
        self.action_manager = ActionManagerWidget(self)
        self.test_verification = TestVerificationWidget(self)

        self.tabs.addTab(self.project_manager, "Project Manager")
        self.tabs.addTab(self.requirements_manager, "Requirements Manager")
        self.tabs.addTab(self.system_state_tracker, "Systems Engineering State")
        self.tabs.addTab(self.dodaf_builder, "DoDAF Builder")
        self.tabs.addTab(self.action_manager, "Action Manager")
        self.tabs.addTab(self.test_verification, "Test Verification")

    def update_project_name(self, name):
        """Update the displayed project name."""
        self.project_name = name
        self.update_header()

    def update_system_state(self, state):
        """Update the displayed systems engineering state."""
        self.system_state = state
        self.update_header()

    def update_header(self):
        """Update the header text."""
        self.header.setText(f"MBSE Tool - {self.project_name} ({self.system_state})")

    def save_project(self):
        """Save the current project."""
        project_name, _ = QFileDialog.getSaveFileName(self, "Save Project", "", "JSON Files (*.json)")
        if project_name:
            if not project_name.endswith(".json"):
                project_name += ".json"
            current_state = {
                "requirements": self.requirements_manager.get_data(),
                "actions": self.action_manager.get_data(),
                "tests": self.test_verification.get_data(),
                "system_state": self.system_state,
            }
            with open(project_name, "w") as file:
                json.dump(current_state, file)
            self.update_project_name(os.path.basename(project_name).replace(".json", ""))


class ProjectManagerWidget(QWidget):
    """Project Manager for saving, loading, and managing projects."""
    def __init__(self, parent_app):
        super().__init__()
        self.parent_app = parent_app
        self.setStyleSheet("background-color: #2E2E2E; color: #FFFFFF;")
        self.layout = QVBoxLayout(self)
        self.projects_dir = "projects"
        os.makedirs(self.projects_dir, exist_ok=True)

        header = QLabel("Project Manager")
        header.setStyleSheet("font-size: 20px; font-weight: bold;")
        self.layout.addWidget(header)

        self.project_list = QTreeWidget()
        self.project_list.setHeaderLabel("Saved Projects")
        self.project_list.setStyleSheet("background-color: #3E3E3E; color: #FFFFFF;")
        self.layout.addWidget(self.project_list)
        self.refresh_project_list()

        button_layout = QHBoxLayout()
        self.new_button = self.create_button("New Project", self.create_new_project)
        self.load_button = self.create_button("Load Project", self.load_project)
        button_layout.addWidget(self.new_button)
        button_layout.addWidget(self.load_button)
        self.layout.addLayout(button_layout)

    def create_button(self, text, action):
        button = QPushButton(text)
        button.setStyleSheet("background-color: #000000; color: #FFFFFF;")
        button.clicked.connect(action)
        return button

    def refresh_project_list(self):
        self.project_list.clear()
        for project in os.listdir(self.projects_dir):
            if project.endswith(".json"):
                QTreeWidgetItem(self.project_list, [project])

    def create_new_project(self):
        project_name, _ = QFileDialog.getSaveFileName(self, "New Project", "", "JSON Files (*.json)")
        if project_name:
            if not project_name.endswith(".json"):
                project_name += ".json"
            with open(project_name, "w") as file:
                json.dump({}, file)
            self.refresh_project_list()

    def load_project(self):
        project_path, _ = QFileDialog.getOpenFileName(self, "Load Project", "", "JSON Files (*.json)")
        if project_path:
            with open(project_path, "r") as file:
                project_data = json.load(file)
                self.parent_app.update_project_name(os.path.basename(project_path).replace(".json", ""))
                self.parent_app.requirements_manager.load_data(project_data.get("requirements", []))
                self.parent_app.action_manager.load_data(project_data.get("actions", []))
                self.parent_app.test_verification.load_data(
                    project_data.get("tests", []),
                    project_data.get("requirements", [])
                )
                self.parent_app.update_system_state(project_data.get("system_state", "Concept Development"))


class SystemStateWidget(QWidget):
    """Track and manage the systems engineering state."""
    def __init__(self, parent_app):
        super().__init__()
        self.parent_app = parent_app
        self.setStyleSheet("background-color: #2E2E2E; color: #FFFFFF;")
        self.layout = QVBoxLayout(self)

        header = QLabel("Systems Engineering State")
        header.setStyleSheet("font-size: 20px; font-weight: bold;")
        self.layout.addWidget(header)

        self.state_selector = QComboBox()
        self.state_selector.addItems([
            "Concept Development",
            "Requirements Analysis",
            "Design",
            "Implementation",
            "Integration",
            "Verification",
            "Validation"
        ])
        self.state_selector.setStyleSheet("background-color: #3E3E3E; color: #FFFFFF;")
        self.state_selector.currentTextChanged.connect(self.update_state)
        self.layout.addWidget(self.state_selector)

        self.current_state_label = QLabel("Current State: Concept Development")
        self.current_state_label.setStyleSheet("font-size: 16px; color: #FFFFFF;")
        self.layout.addWidget(self.current_state_label)

    def update_state(self, state):
        self.current_state_label.setText(f"Current State: {state}")
        self.parent_app.update_system_state(state)


class RequirementsManagerWidget(QWidget):
    """Manage requirements and their relationships."""
    def __init__(self, parent_app):
        super().__init__()
        self.parent_app = parent_app
        self.setStyleSheet("background-color: #2E2E2E; color: #FFFFFF;")
        self.layout = QVBoxLayout(self)

        header = QLabel("Requirements Manager")
        header.setStyleSheet("font-size: 20px; font-weight: bold;")
        self.layout.addWidget(header)

        # Containment Tree
        self.containment_tree = QTreeWidget()
        self.containment_tree.setHeaderLabel("Requirements Containment Tree")
        self.containment_tree.setStyleSheet("background-color: #3E3E3E; color: #FFFFFF;")
        self.layout.addWidget(self.containment_tree)

        # Add/Edit/Delete buttons
        button_layout = QHBoxLayout()
        self.add_button = self.create_button("Add Requirement", self.open_add_requirement_dialog)
        self.edit_button = self.create_button("Edit Requirement", self.open_edit_requirement_dialog)
        self.delete_button = self.create_button("Delete Requirement", self.delete_selected_requirement)
        button_layout.addWidget(self.add_button)
        button_layout.addWidget(self.edit_button)
        button_layout.addWidget(self.delete_button)
        self.layout.addLayout(button_layout)

        self.requirements_data = {}

    def create_button(self, text, action):
        button = QPushButton(text)
        button.setStyleSheet("background-color: #000000; color: #FFFFFF;")
        button.clicked.connect(action)
        return button

    def open_add_requirement_dialog(self):
        dialog = RequirementDialog(self, "Add Requirement")
        if dialog.exec_() == QDialog.Accepted:
            req_id, req_details = dialog.get_data()
            self.requirements_data[req_id] = req_details
            self.update_tree()

    def open_edit_requirement_dialog(self):
        selected_item = self.containment_tree.currentItem()
        if selected_item:
            req_id = selected_item.text(0)
            dialog = RequirementDialog(self, "Edit Requirement", req_id, self.requirements_data[req_id])
            if dialog.exec_() == QDialog.Accepted:
                _, req_details = dialog.get_data()
                self.requirements_data[req_id] = req_details
                self.update_tree()

    def delete_selected_requirement(self):
        selected_item = self.containment_tree.currentItem()
        if selected_item:
            req_id = selected_item.text(0)
            del self.requirements_data[req_id]
            self.update_tree()

    def update_tree(self):
        self.containment_tree.clear()
        for req_id, req_details in self.requirements_data.items():
            item = QTreeWidgetItem([req_id])
            self.containment_tree.addTopLevelItem(item)

    def get_data(self):
        return [{"ID": req_id, **req_details} for req_id, req_details in self.requirements_data.items()]

    def load_data(self, requirements):
        self.requirements_data = {req["ID"]: {"Description": req["Description"]} for req in requirements}
        self.update_tree()


class RequirementDialog(QDialog):
    """Dialog for adding or editing requirements."""
    def __init__(self, parent, title, req_id=None, req_details=None):
        super().__init__(parent)
        self.setWindowTitle(title)
        self.setStyleSheet("background-color: #2E2E2E; color: #FFFFFF;")
        self.layout = QFormLayout(self)

        self.req_id_input = QLineEdit(req_id if req_id else "")
        self.req_id_input.setStyleSheet("background-color: #FFFFFF; color: #000000;")
        self.layout.addRow("Requirement ID:", self.req_id_input)

        self.req_description_input = QTextEdit(req_details["Description"] if req_details else "")
        self.req_description_input.setStyleSheet("background-color: #FFFFFF; color: #000000;")
        self.layout.addRow("Description:", self.req_description_input)

        button_layout = QHBoxLayout()
        self.save_button = QPushButton("Save")
        self.save_button.setStyleSheet("background-color: #000000; color: #FFFFFF;")
        self.save_button.clicked.connect(self.accept)
        self.cancel_button = QPushButton("Cancel")
        self.cancel_button.setStyleSheet("background-color: #000000; color: #FFFFFF;")
        self.cancel_button.clicked.connect(self.reject)
        button_layout.addWidget(self.save_button)
        button_layout.addWidget(self.cancel_button)
        self.layout.addRow(button_layout)

        self.setLayout(self.layout)

    def get_data(self):
        return self.req_id_input.text(), {"Description": self.req_description_input.toPlainText()}


class DODAFBuilderWidget(QWidget):
    """Build DoDAF views."""
    def __init__(self, parent_app):
        super().__init__()
        self.parent_app = parent_app
        self.setStyleSheet("background-color: #2E2E2E; color: #FFFFFF;")
        self.layout = QVBoxLayout(self)

        header = QLabel("DoDAF Builder")
        header.setStyleSheet("font-size: 20px; font-weight: bold;")
        self.layout.addWidget(header)

        self.diagram_view = QGraphicsView()
        self.diagram_scene = QGraphicsScene()
        self.diagram_view.setScene(self.diagram_scene)
        self.diagram_view.setStyleSheet("background-color: #3E3E3E; border: 1px solid #FFFFFF;")
        self.layout.addWidget(self.diagram_view)

        button_layout = QHBoxLayout()
        self.add_element_button = self.create_button("Add Element", self.add_element)
        self.add_link_button = self.create_button("Add Link", self.add_link)
        self.clear_diagram_button = self.create_button("Clear Diagram", self.clear_diagram)
        button_layout.addWidget(self.add_element_button)
        button_layout.addWidget(self.add_link_button)
        button_layout.addWidget(self.clear_diagram_button)
        self.layout.addLayout(button_layout)

        self.elements = []

    def create_button(self, text, action):
        button = QPushButton(text)
        button.setStyleSheet("background-color: #000000; color: #FFFFFF;")
        button.clicked.connect(action)
        return button

    def add_element(self):
        element_name = f"Element {len(self.elements) + 1}"
        position = QPointF(len(self.elements) * 50, len(self.elements) * 50)
        ellipse = QGraphicsEllipseItem(position.x(), position.y(), 100, 50)
        ellipse.setPen(QPen(Qt.white))
        ellipse.setBrush(Qt.gray)
        text = QGraphicsTextItem(element_name, ellipse)
        text.setFont(QFont("Arial", 10))
        text.setDefaultTextColor(Qt.white)
        self.diagram_scene.addItem(ellipse)
        self.elements.append(ellipse)

    def add_link(self):
        if len(self.elements) < 2:
            return
        source = self.elements[-2]
        target = self.elements[-1]
        source_center = source.sceneBoundingRect().center()
        target_center = target.sceneBoundingRect().center()
        line = QGraphicsLineItem(source_center.x(), source_center.y(), target_center.x(), target_center.y())
        line.setPen(QPen(Qt.green, 2))
        self.diagram_scene.addItem(line)

    def clear_diagram(self):
        self.diagram_scene.clear()
        self.elements = []


class ActionManagerWidget(QWidget):
    """Track actions and their statuses."""
    def __init__(self, parent_app):
        super().__init__()
        self.parent_app = parent_app
        self.setStyleSheet("background-color: #2E2E2E; color: #FFFFFF;")
        self.layout = QVBoxLayout(self)

        header = QLabel("Action Manager")
        header.setStyleSheet("font-size: 20px; font-weight: bold;")
        self.layout.addWidget(header)

        self.actions_table = QTableWidget(0, 3)
        self.actions_table.setHorizontalHeaderLabels(["Action ID", "Description", "Status"])
        self.actions_table.setStyleSheet("background-color: #3E3E3E; color: #000000;")
        self.layout.addWidget(self.actions_table)

        button_layout = QHBoxLayout()
        self.add_action_button = self.create_button("Add Action", self.add_action)
        self.delete_action_button = self.create_button("Delete Action", self.delete_action)
        button_layout.addWidget(self.add_action_button)
        button_layout.addWidget(self.delete_action_button)
        self.layout.addLayout(button_layout)

    def create_button(self, text, action):
        button = QPushButton(text)
        button.setStyleSheet("background-color: #000000; color: #FFFFFF;")
        button.clicked.connect(action)
        return button

    def add_action(self):
        row_position = self.actions_table.rowCount()
        self.actions_table.insertRow(row_position)
        self.actions_table.setItem(row_position, 0, QTableWidgetItem(f"A{row_position + 1}"))
        self.actions_table.item(row_position, 0).setForeground(Qt.black)
        self.actions_table.setItem(row_position, 1, QTableWidgetItem("New Action"))
        self.actions_table.item(row_position, 1).setForeground(Qt.black)
        self.actions_table.setItem(row_position, 2, QTableWidgetItem("Pending"))
        self.actions_table.item(row_position, 2).setForeground(Qt.black)

    def delete_action(self):
        selected_row = self.actions_table.currentRow()
        if selected_row >= 0:
            self.actions_table.removeRow(selected_row)

    def get_data(self):
        data = []
        for row in range(self.actions_table.rowCount()):
            action = {
                "Action ID": self.actions_table.item(row, 0).text(),
                "Description": self.actions_table.item(row, 1).text(),
                "Status": self.actions_table.item(row, 2).text(),
            }
            data.append(action)
        return data

    def load_data(self, actions):
        self.actions_table.setRowCount(0)
        for action in actions:
            row_position = self.actions_table.rowCount()
            self.actions_table.insertRow(row_position)
            self.actions_table.setItem(row_position, 0, QTableWidgetItem(action["Action ID"]))
            self.actions_table.item(row_position, 0).setForeground(Qt.black)
            self.actions_table.setItem(row_position, 1, QTableWidgetItem(action["Description"]))
            self.actions_table.item(row_position, 1).setForeground(Qt.black)
            self.actions_table.setItem(row_position, 2, QTableWidgetItem(action["Status"]))
            self.actions_table.item(row_position, 2).setForeground(Qt.black)


class TestVerificationWidget(QWidget):
    """Manage test cases and their traceability."""
    def __init__(self, parent_app):
        super().__init__()
        self.parent_app = parent_app
        self.setStyleSheet("background-color: #2E2E2E; color: #FFFFFF;")
        self.layout = QVBoxLayout(self)

        header = QLabel("Test Verification")
        header.setStyleSheet("font-size: 20px; font-weight: bold;")
        self.layout.addWidget(header)

        self.test_table = QTableWidget(0, 3)
        self.test_table.setHorizontalHeaderLabels(["Test ID", "Requirement ID", "Status"])
        self.test_table.setStyleSheet("background-color: #3E3E3E; color: #000000;")
        self.layout.addWidget(self.test_table)

        button_layout = QHBoxLayout()
        self.add_test_button = self.create_button("Add Test", self.add_test)
        self.delete_test_button = self.create_button("Delete Test", self.delete_test)
        button_layout.addWidget(self.add_test_button)
        button_layout.addWidget(self.delete_test_button)
        self.layout.addLayout(button_layout)

        self.requirements_dropdown = QComboBox()
        self.requirements_dropdown.setStyleSheet("background-color: #3E3E3E; color: #FFFFFF;")
        self.layout.addWidget(self.requirements_dropdown)

    def create_button(self, text, action):
        button = QPushButton(text)
        button.setStyleSheet("background-color: #000000; color: #FFFFFF;")
        button.clicked.connect(action)
        return button

    def add_test(self):
        row_position = self.test_table.rowCount()
        self.test_table.insertRow(row_position)
        self.test_table.setItem(row_position, 0, QTableWidgetItem(f"T{row_position + 1}"))
        self.test_table.item(row_position, 0).setForeground(Qt.black)
        self.test_table.setItem(row_position, 1, QTableWidgetItem("Unlinked"))
        self.test_table.item(row_position, 1).setForeground(Qt.black)
        self.test_table.setItem(row_position, 2, QTableWidgetItem("Pending"))
        self.test_table.item(row_position, 2).setForeground(Qt.black)

    def delete_test(self):
        selected_row = self.test_table.currentRow()
        if selected_row >= 0:
            self.test_table.removeRow(selected_row)

    def load_data(self, tests, requirements):
        self.test_table.setRowCount(0)
        self.requirements_dropdown.clear()
        self.requirements_dropdown.addItems([req["ID"] for req in requirements])
        for test in tests:
            row_position = self.test_table.rowCount()
            self.test_table.insertRow(row_position)
            self.test_table.setItem(row_position, 0, QTableWidgetItem(test["Test ID"]))
            self.test_table.item(row_position, 0).setForeground(Qt.black)
            self.test_table.setItem(row_position, 1, QTableWidgetItem(test["Requirement ID"]))
            self.test_table.item(row_position, 1).setForeground(Qt.black)
            self.test_table.setItem(row_position, 2, QTableWidgetItem(test["Status"]))
            self.test_table.item(row_position, 2).setForeground(Qt.black)

    def get_data(self):
        data = []
        for row in range(self.test_table.rowCount()):
            test = {
                "Test ID": self.test_table.item(row, 0).text(),
                "Requirement ID": self.test_table.item(row, 1).text(),
                "Status": self.test_table.item(row, 2).text(),
            }
            data.append(test)
        return data


def launch_mbse_tool():
    app = QApplication(sys.argv)
    window = MBSETool()
    window.show()
    app.exec_()


if __name__ == "__main__":
    launch_mbse_tool()
